{"version":3,"sources":["pictures-test.js"],"names":["test","beforeEach","t","srv","pictures","context","url","image","fixtures","getImage","body","uri","publicId","json","deepEqual","options","method","description","src","userId","resolveWithFullResponse","throws","token","utils","signToken","config","secret","headers","response","is","statusCode","id","imageNew","JSON","parse","stringify","liked","likes","images","getImages","getImagesByTag"],"mappings":"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","file":"pictures-test.js","sourcesContent":["'user strict'\r\n\r\nimport test from 'ava'\r\nimport micro from 'micro'\r\n// import uuid from 'uuid-base62'\r\nimport listen from 'test-listen'\r\nimport request from 'request-promise'\r\nimport pictures from '../pictures'\r\nimport fixtures from './fixtures'\r\nimport utils from '../lib/utils'\r\nimport config from '../config'\r\n\r\ntest.beforeEach(async t => {\r\n  let srv = micro(pictures)\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\ntest('GET /:id', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  // let srv = micro(pictures)\r\n  // let url = await listen(srv)\r\n  let body = await request({ uri: `${url}/${image.publicId}`, json: true })\r\n  t.deepEqual(body, image)\r\n\r\n  // let id = uuid.v4()\r\n  // let srv = micro(async (req, res) => {\r\n  //   send(res, 200, { id })\r\n  // })\r\n\r\n  // let body = await request({ uri: `${url}/${id}`, json: true })\r\n  // let body = await request({ url: url, json: true })\r\n  // t.deepEqual(body, { id })\r\n})\r\n\r\ntest('no token POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n\r\n  t.throws(request(options), /invalid token/)\r\n\r\n  // let response = await request(options)\r\n\r\n  // t.is(response.statusCode, 201)\r\n  // t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('invalid token POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let token = await utils.signToken({ userId: 'hacky' }, config.secret)\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n\r\n  await t.throws(request(options), /invalid token/)\r\n\r\n  // let response = await request(options)\r\n\r\n  // t.is(response.statusCode, 201)\r\n  // t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('secure POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let token = await utils.signToken({ userId: image.userId }, config.secret)\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n\r\n  let response = await request(options)\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, image)\r\n\r\n  // let response = await request(options)\r\n\r\n  // t.is(response.statusCode, 201)\r\n  // t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('POST /:id/like', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'POST',\r\n    uri: `${url}/${image.id}/like`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n  let imageNew = JSON.parse(JSON.stringify(image))\r\n  imageNew.liked = true\r\n  imageNew.likes = 1\r\n\r\n  t.deepEqual(body, imageNew)\r\n})\r\n\r\ntest('GET /list', async t => {\r\n  let images = fixtures.getImages()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'GET',\r\n    uri: `${url}/list`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n\r\n  t.deepEqual(body, images)\r\n})\r\n\r\ntest('GET /tag/:tag', async t => {\r\n  let images = fixtures.getImagesByTag()\r\n  let url = t.context.url\r\n\r\n  let options = {\r\n    method: 'GET',\r\n    uri: `${url}/tag/awesome`,\r\n    json: true\r\n  }\r\n\r\n  let body = await request(options)\r\n\r\n  t.deepEqual(body, images)\r\n})\r\n"]}